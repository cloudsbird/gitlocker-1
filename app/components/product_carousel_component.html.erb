<style type="text/css">
.product-carousel {
  position: relative;
  max-width: 570%; /* Adjust to fit the parent container */
  margin: 0 auto; /* Center the carousel */
  overflow: hidden; /* Hide overflow */
}

.carousel-inner {
  display: flex;
  gap: 28px; /* Space between items */
  flex-wrap: nowrap; /* Ensure items do not wrap to the next line */
  width: max-content; /* Expand to fit all items */
  overflow-x: hidden; /* Hide horizontal overflow */
  scroll-behavior: smooth; /* Smooth scrolling */
  
  /* Hide scrollbar */
  -ms-overflow-style: none; /* Hides the scrollbar in Internet Explorer and Edge */
  scrollbar-width: none; /* Hides the scrollbar in Firefox */
}

.carousel-inner::-webkit-scrollbar {
  display: none; /* Hides the scrollbar in WebKit browsers */
}

.carousel-page {
  flex-shrink: 0;
  width: calc(100% / 5 - 28px); /* Show 5 items per page, adjust based on spacing */
}

.carousel-control {
  background-color: rgba(255, 255, 255, 0.2); /* Adjust based on theme */
  border-radius: 50%;
  transition: background-color 0.3s;
}

.carousel-control:hover {
  background-color: rgba(255, 255, 255, 0.5); /* Adjust based on theme */
}

.carousel-control.prev {
   /* Hide the previous button initially */
  left: 10px; /* Position the previous button */
}

.carousel-control.next {
  right: -4px; /* Position the next button */
}


</style>

<div class="product-carousel relative overflow-hidden">
  <div class="carousel-inner flex gap-6">
    <% @recent_products.each_with_index do |product, index| %>
      <div class="carousel-page flex-shrink-0 flex-grow-0" style="flex-basis: calc(18%); max-width: calc(18%);" data-page="<%= index + 1 %>">
        <%= render partial: 'home/product', locals: { product: product } %>
      </div>
    <% end %>
  </div>

  <% if @recent_products.length > 5 %>
    <!-- Slider controls -->
    <button type="button" class="carousel-control prev absolute top-1/2 left-0 transform -translate-y-1/2 z-30 flex items-center justify-center h-10 w-10 cursor-pointer group focus:outline-none" data-action="click->carousel#prevSlide" data-carousel-prev>
      <span class="inline-flex items-center justify-center w-8 h-8 rounded-full bg-white/20 dark:bg-gray-400/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none">
        <svg class="w-4 h-4 text-white dark:text-gray-400 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 1 1 5l4 4"/>
        </svg>
        <span class="sr-only">Previous</span>
      </span>
    </button>
    <button type="button" class="carousel-control next absolute top-1/2 right-10 transform -translate-y-1/2 z-30 flex items-center justify-center h-10 w-10 cursor-pointer group focus:outline-none" data-action="click->carousel#nextSlide" data-carousel-next>
      <span class="inline-flex items-center justify-center w-8 h-8 rounded-full bg-white/30 dark:bg-gray-400/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none">
        <svg class="w-4 h-4 text-white dark:text-gray-400 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
        </svg>
        <span class="sr-only">Next</span>
      </span>
    </button>
  <% end %>
</div>

<script type="text/javascript">
  document.addEventListener('turbo:load', () => {
  const prevButton = document.querySelector('[data-carousel-prev]');
  const nextButton = document.querySelector('[data-carousel-next]');
  const carouselInner = document.querySelector('.carousel-inner');
  const carouselPages = Array.from(document.querySelectorAll('.carousel-page'));
  const itemsPerPage = 1; // Number of items to scroll at a time
  let currentIndex = 0;

  const updateControlsVisibility = () => {
    prevButton.style.display = currentIndex === 0 ? 'none' : 'block';
    nextButton.style.display = currentIndex >= carouselPages.length - 1 ? 'none' : 'block';
  };

  const scrollToIndex = (index) => {
    if (index < 0 || index >= carouselPages.length) return;

    const targetPage = carouselPages[index];
    if (targetPage) {
      carouselInner.scrollTo({
        left: targetPage.offsetLeft,
        behavior: 'smooth',
      });
      currentIndex = index;
      updateControlsVisibility();
    }
  };

  const handleScroll = (direction) => {
    let newIndex = currentIndex + direction;

    // Ensure the new index is within bounds
    newIndex = Math.max(0, Math.min(newIndex, carouselPages.length - 1));
    scrollToIndex(newIndex);
  };

  // Attach click handlers to buttons
  prevButton.addEventListener('click', () => handleScroll(-itemsPerPage)); // Scroll left
  nextButton.addEventListener('click', () => handleScroll(itemsPerPage)); // Scroll right

  // Initialize control visibility on page load
  updateControlsVisibility();
});


</script>
